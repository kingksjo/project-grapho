from sqlalchemy.orm import Session
from . import models, schemas, auth

# --- READ Operations ---

def get_user_by_email(db: Session, email: str):
    """
    Queries the database to find a user by their email address.
    
    Args:
        db (Session): The SQLAlchemy database session.
        email (str): The email address to search for.

    Returns:
        models.User or None: The User object if found, otherwise None.
    """
    # .first() returns the first result or None if no match is found.
    return db.query(models.User).filter(models.User.email == email).first()


# --- CREATE Operations ---

def create_user(db: Session, user: schemas.UserCreate):
    """
    Creates a new user in the database.

    Args:
        db (Session): The SQLAlchemy database session.
        user (schemas.UserCreate): The Pydantic schema containing user data.

    Returns:
        models.User: The newly created User object.
    """
    
    # 1. Hash the user's plain-text password
    hashed_password = auth.hash_password(user.password)
    
    # 2. Create a new SQLAlchemy User model instance.
    #    We use .model_dump() on the Pydantic schema but exclude the plain password.
    db_user = models.User(
        **user.model_dump(exclude={"password"}), 
        hashed_password=hashed_password
    )
    
    # 3. Add the new user object to the session
    db.add(db_user)
    
    # 4. Commit the transaction to save the user to the database
    db.commit()
    
    # 5. Refresh the instance to get the data that was generated by the database
    #    (like the auto-generated UUID and created_at timestamp).
    db.refresh(db_user)
    
    return db_user